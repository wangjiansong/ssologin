<?xml version="1.0" encoding="UTF-8"?>
<!--

    Licensed to Jasig under one or more contributor license
    agreements. See the NOTICE file distributed with this work
    for additional information regarding copyright ownership.
    Jasig licenses this file to you under the Apache License,
    Version 2.0 (the "License"); you may not use this file
    except in compliance with the License.  You may obtain a
    copy of the License at the following location:

      http://www.apache.org/licenses/LICENSE-2.0

    Unless required by applicable law or agreed to in writing,
    software distributed under the License is distributed on an
    "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
    KIND, either express or implied.  See the License for the
    specific language governing permissions and limitations
    under the License.

-->
<!--
| deployerConfigContext.xml centralizes into one file some of the declarative configuration that
| all CAS deployers will need to modify.
|
| This file declares some of the Spring-managed JavaBeans that make up a CAS deployment.  
| The beans declared in this file are instantiated at context initialization time by the Spring 
| ContextLoaderListener declared in web.xml.  It finds this file because this
| file is among those declared in the context parameter "contextConfigLocation".
|
| By far the most common change you will need to make in this file is to change the last bean
| declaration to replace the default authentication handler with
| one implementing your approach for authenticating usernames and passwords.
+-->

<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:p="http://www.springframework.org/schema/p"
       xmlns:c="http://www.springframework.org/schema/c"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:util="http://www.springframework.org/schema/util"
       xmlns:sec="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.2.xsd
       http://www.springframework.org/schema/tx http://www.springframework.org/schema/tx/spring-tx-3.2.xsd
       http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.2.xsd
       http://www.springframework.org/schema/util http://www.springframework.org/schema/util/spring-util.xsd">

    <!--
       | The authentication manager defines security policy for authentication by specifying at a minimum
       | the authentication handlers that will be used to authenticate credential. While the AuthenticationManager
       | interface supports plugging in another implementation, the default PolicyBasedAuthenticationManager should
       | be sufficient in most cases.
       +-->
    <bean id="authenticationManager" class="org.jasig.cas.authentication.PolicyBasedAuthenticationManager">
        <constructor-arg>
            <map>
            
                <!-- 襄阳市政务中心 -->
                <!-- <entry key-ref="httpAuthenticationHandler" value-ref="httpPrincipalResolver" /> -->
                
                <entry key-ref="proxyAuthenticationHandler" value-ref="proxyPrincipalResolver" />
                <!-- <entry key-ref="primaryAuthenticationHandler" value-ref="primaryPrincipalResolver" /> -->
                <!--    oauth2 登录处理     -->
                <entry key-ref="oauthAuthenticationHandler" value-ref="oauthPrincipalResolver" />	
                <entry key-ref="dbAuthBindHandler" value-ref="primaryBindPrincipalResolver" />
                <!--    jdbc登录    -->
                <!-- interlib 读者证号密码登录 -->
                <entry key-ref="dbAuthHandler" value-ref="primaryPrincipalResolver"/>
                <!-- onecard 读者证号密码登录 -->
                <entry key-ref="dbAuthHandler2" value-ref="secondPrincipalResolver"/> 
                 <!-- interlib 身份证号密码登录 -->
                <entry key-ref="dbAuthHandler3" value-ref="thirdPrincipalResolver"/>
                <!-- onecard 身份证号密码登录 -->
                <entry key-ref="dbAuthHandler4" value-ref="forthPrincipalResolver"/>
                
            </map>
        </constructor-arg>
	    <property name="authenticationMetaDataPopulators">  
	        <util:list>  
	           <bean class="org.jasig.cas.support.pac4j.authentication.ClientAuthenticationMetaDataPopulator" />  
	        </util:list>  
	    </property>
        <property name="authenticationPolicy">
            <bean class="org.jasig.cas.authentication.AnyAuthenticationPolicy" />
        </property>
    </bean>


    <!-- Required for proxy ticket mechanism. -->
    <bean id="proxyAuthenticationHandler"
          class="org.jasig.cas.authentication.handler.support.HttpBasedServiceCredentialsAuthenticationHandler"
          p:httpClient-ref="httpClient" p:requireSecure="false"/>
	
	<!-- <bean id="httpAuthenticationHandler"
          class="org.jasig.services.persondir.support.XYZWHttpHandler"
          p:httpClient-ref="httpClient" p:requireSecure="false"/> -->
          <bean id="httpAuthenticationHandler"
          class="org.jasig.services.persondir.support.XYLIBAttributeDao"
          p:httpClient-ref="httpClient"/>
          
    <bean id="oauthAuthenticationHandler" class="org.jasig.cas.support.pac4j.authentication.handler.support.ClientAuthenticationHandler">
        <constructor-arg index="0" ref="clients"/>
    </bean>
    <bean id="oauthPrincipalResolver" class="org.jasig.cas.support.pac4j.plugin.common.OauthPersonDirectoryPrincipalResolver" />
    <!--
       | TODO: Replace this component with one suitable for your enviroment.
       |
       | This component provides authentication for the kind of credential used in your environment. In most cases
       | credential is a username/password pair that lives in a system of record like an LDAP directory.
       | The most common authentication handler beans:
       |
       | * org.jasig.cas.authentication.LdapAuthenticationHandler
       | * org.jasig.cas.adaptors.jdbc.QueryDatabaseAuthenticationHandler
       | * org.jasig.cas.adaptors.x509.authentication.handler.support.X509CredentialsAuthenticationHandler
       | * org.jasig.cas.support.spnego.authentication.handler.support.JCIFSSpnegoAuthenticationHandler
     	-->
    <bean id="primaryAuthenticationHandler"
          class="org.jasig.cas.authentication.AcceptUsersAuthenticationHandler">
        <property name="users">
            <map>
                <entry key="casuser" value="Mellon"/>
            </map>
        </property>
    </bean>
     	
    <!-- 可选配置:数据库加密方式 -->  
	 <!-- <bean id="passwordEncoder" class="org.jasig.cas.authentication.handler.DefaultPasswordEncoder" p:characterEncoding="UTF-8" >
	    <constructor-arg index="0" value="MD5" />
	</bean> -->
	<bean id="dbAuthBindHandler" class="org.jasig.cas.adaptors.jdbc.QueryBindDatabaseAuthenticationHandler" p:dataSource-ref="dataSource" 
		p:sql="select rdpasswd, qqid, sinaweiboid, weixinid, rdname from reader where (rdname=? or rdloginid=?) " 
		p:httpClient-ref="httpClient" />
		
	<bean id="dbAuthHandler" class="org.jasig.cas.adaptors.jdbc.QueryAdminDatabaseAuthenticationHandler" 
		p:dataSource-ref="dataSource" 
		p:sql="select rdpasswd from reader where rdid=? "/>
		
	<bean id="dbAuthHandler2" class="org.jasig.cas.adaptors.jdbc.QueryAdminDatabaseAuthenticationHandler" 
		p:dataSource-ref="dataSource2" 
		p:sql="select rdpasswd from reader where rdid=? "
		p:passwordEncoder-ref="RS10DESPasswordEncoder"/>
		<!-- p:passwordEncoder-ref="passwordEncoder" -->
   <!--数据验证模式2 我自定义的des加密类，返回值：加密后的字符串-->
   <bean id="RS10DESPasswordEncoder" class="org.jasig.cas.authentication.handler.Crypt" />
  
  <bean id="dbAuthHandler3" class="org.jasig.cas.adaptors.jdbc.QueryAdminDatabaseAuthenticationHandler" 
		p:dataSource-ref="dataSource" 
		p:sql="select rdpasswd from reader where rdCertify=? "/>

	<bean id="dbAuthHandler4" class="org.jasig.cas.adaptors.jdbc.QueryAdminDatabaseAuthenticationHandler" 
		p:dataSource-ref="dataSource2" 
		p:sql="select rdpasswd from reader where rdCertify=? "
		p:passwordEncoder-ref="RS10DESPasswordEncoder"/>
		
    <!-- Required for proxy ticket mechanism -->
    <bean id="proxyPrincipalResolver"
          class="org.jasig.cas.authentication.principal.BasicPrincipalResolver" />

    <bean id="primaryBindPrincipalResolver"
          class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver" >
        <property name="attributeRepository" ref="attributeBindRepository" />
    </bean>

	<bean id="httpPrincipalResolver"
          class="org.jasig.cas.authentication.principal.XYLIBPrincipalResolver" />
          
    <!--
       | Resolves a principal from a credential using an attribute repository that is configured to resolve
       | against a deployer-specific store (e.g. LDAP).
       -->
    <bean id="primaryPrincipalResolver"
          class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver" >
        <property name="attributeRepository" ref="attributeRepository" />
    </bean>
    <bean id="secondPrincipalResolver"
          class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver" >
        <property name="attributeRepository" ref="attributeRepositoryfb" />
    </bean>
    <bean id="thirdPrincipalResolver"
          class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver" >
        <property name="attributeRepository" ref="attributeRepositorythird" />
    </bean>
    <bean id="forthPrincipalResolver"
          class="org.jasig.cas.authentication.principal.PersonDirectoryPrincipalResolver" >
        <property name="attributeRepository" ref="attributeRepositoryforth" />
    </bean>
    <!-- mysql数据库 -->
    <!-- <bean id="dataSource" class="com.mchange.v2.c3p0.ComboPooledDataSource" >  
	    <property name="driverClass" value="com.mysql.jdbc.Driver"/>      
	    <property name="jdbcUrl" value="jdbc:mysql://119.23.146.3:3306/liberhome" />      
	    <property name="user" value="root"/>  
	    <property name="password" value="data380"/>  
	    遇到的MySQL8小时问题  
	    <property name="preferredTestQuery" value="SELECT 1"/>      
	    <property name="idleConnectionTestPeriod" value="18000"/>      
	    <property name="testConnectionOnCheckout" value="true"/>  
	</bean> -->
	<!-- oracle数据库 -->
	<bean id="dataSource" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
			<property name="driverClassName" value="${db1.driver}"/>
			<property name="url" value="${db1.url}"/>
			<property name="username" value="${db1.username}"/>
			<property name="password" value="${db1.password}"/>
	</bean>
	<!--创建数据源dataSource2 -->
	<bean id="dataSource2" class="org.springframework.jdbc.datasource.DriverManagerDataSource">
	    <property name="driverClassName" value="${db2.driver}" />
	    <property name="url" value="${db2.url}" />
	    <property name="username" value="${db2.username}" />
	    <property name="password" value="${db2.password}" />
	</bean>
	
	<!-- jdbc关联数据源1 -->
	<bean id="jdbcTemplate" class="org.springframework.jdbc.core.JdbcTemplate">  
        <property name="dataSource" ref="dataSource"/>  
    </bean>
    <!-- jdbc关联数据源2 -->
    <bean id="jdbcTempfb" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource2"/>
	</bean>
	<!-- jdbc关联数据源3 -->
    <bean id="jdbcTempthird" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource"/>
	</bean>
	<!-- jdbc关联数据源4 -->
    <bean id="jdbcTempforth" class="org.springframework.jdbc.core.JdbcTemplate">
		<property name="dataSource" ref="dataSource2"/>
	</bean>

	<bean id="attributeBindRepository" class="org.jasig.services.persondir.support.AccoutBindAttributeDao" >   
    	<property name="jdbcBindTemplate" ref="jdbcTempfb"/>    
    </bean>

 	<bean id="attributeRepository" class="org.jasig.services.persondir.support.AccoutAttributeDao" >   
    	<property name="jdbcTemplate" ref="jdbcTemplate"/>    
    </bean>
    
    <bean id="attributeRepositoryfb" class="org.jasig.services.persondir.support.SecondAccoutAttributeDao" >   
    	<property name="jdbcTemplate" ref="jdbcTempfb"/>    
    </bean>
	<bean id="attributeRepositorythird" class="org.jasig.services.persondir.support.ThirdAttributeDao" >   
    	<property name="jdbcTemplate" ref="jdbcTempthird"/>    
    </bean>
    <bean id="attributeRepositoryforth" class="org.jasig.services.persondir.support.ForthAttributeDao" >   
    	<property name="jdbcTemplate" ref="jdbcTempforth"/>    
    </bean>
    <!--
    Bean that defines the attributes that a service may return.  This example uses the Stub/Mock version.  A real implementation
    may go against a database or LDAP server.  The id should remain "attributeRepository" though.
    +
    <bean id="attributeRepository" class="org.jasig.services.persondir.support.jdbc.SingleRowJdbcPersonAttributeDao">   
	    <constructor-arg index="0" ref="dataSource" />
		<constructor-arg index="1">
			<value>
				select id,loginid,libraryid,libname,userid,name,phone,email,password from liber where {0}
			</value>
		</constructor-arg>
		 组装sql用的查询条件属性 
		<property name="queryAttributeMapping">
			<map>
				 //这里的key需写username，value对应数据库用户名字段 
				<entry key="username" value="loginid" />
			</map>
		</property>
		如果要组装多个查询条件，需要加上下面这个，默认为AND 
		<property name="queryType">
			<value>OR</value>
		</property>
	
		要获取的属性在这里配置
		<property name="resultAttributeMapping">
			<map>
				key为对应的数据库字段名称，value为提供给客户端获取的属性名字，系统会自动填充值 
				<entry key="id" value="id" />
				<entry key="loginid" value="loginid" />
				<entry key="libraryid" value="libraryid" />
				<entry key="libname" value="libname" />
				<entry key="userid" value="userid" />
				<entry key="name" value="name" />
				<entry key="phone" value="phone" />
				<entry key="email" value="email" />
				<entry key="password" value="password" />
			</map>
		</property>
	</bean>
	-->
    <!-- 
    Sample, in-memory data store for the ServiceRegistry. A real implementation
    would probably want to replace this with the JPA-backed ServiceRegistry DAO
    The name of this bean should remain "serviceRegistryDao".
    +-->
    <bean id="serviceRegistryDao" class="org.jasig.cas.services.InMemoryServiceRegistryDaoImpl"
            p:registeredServices-ref="registeredServicesList" />

    <util:list id="registeredServicesList">
		<!--     
		<bean class="org.jasig.cas.services.RegexRegisteredService"
              p:id="0" p:name="HTTP and IMAP" p:description="Allows HTTP(S) and IMAP(S) protocols"
              p:serviceId="^(https?|imaps?)://.*" p:evaluationOrder="10000001" /> 
        -->
        <!--
        Use the following definition instead of the above to further restrict access
        to services within your domain (including sub domains).
        Note that example.com must be replaced with the domain you wish to permit.
        This example also demonstrates the configuration of an attribute filter
        that only allows for attributes whose length is 3.
        -->
        <bean class="org.jasig.cas.services.RegexRegisteredService">
        	<property name="id" value="0" />
         	<property name="name" value="HTTP" />
	        <property name="description" value="Allows HTTP(S) protocols" />
	        <!-- <property name="serviceId" value="^https?://(localhost)(:[0-9]+)?/.*" /> -->
	        <property name="serviceId" value="^(https|imaps|http)://.*" />
	        <property name="evaluationOrder" value="10000001" />
	        <property name="allowedAttributes">  
				<list>
					<value>openid</value>
					<value>nickname</value>
					<!-- <value>sex</value>
					<value>headimgurl</value>
					<value>id</value>
					<value>userid</value>
					<value>username</value>
					<value>password</value>
					<value>mobile</value> -->
					
					<value>weixinid</value>
					<value>nickname</value>
					<!-- <value>identitycard</value>   -->
					<value>rdid</value>
					<value>rdloginid</value>
					<value>rdpasswd</value>
					<value>rdname</value>
					<value>rdcertify</value>
					<value>rdborndate</value>
					<value>rdsex</value>
					<value>rdcfstate</value>
					<value>rdtype</value>
				</list>  
			</property>
		</bean>

    </util:list>
    
    <bean id="auditTrailManager" class="com.github.inspektr.audit.support.Slf4jLoggingAuditTrailManager" />
    
    <bean id="healthCheckMonitor" class="org.jasig.cas.monitor.HealthCheckMonitor" p:monitors-ref="monitorsList" />
  
    <util:list id="monitorsList">
      <bean class="org.jasig.cas.monitor.MemoryMonitor" p:freeMemoryWarnThreshold="10" />
      <!--
        NOTE
        The following ticket registries support SessionMonitor:
          * DefaultTicketRegistry
          * JpaTicketRegistry
        Remove this monitor if you use an unsupported registry.
      -->
      <bean class="org.jasig.cas.monitor.SessionMonitor"
          p:ticketRegistry-ref="ticketRegistry"
          p:serviceTicketCountWarnThreshold="5000"
          p:sessionCountWarnThreshold="100000" />
    </util:list>
</beans>
